import os
import sys
import asyncio
import json
import aiohttp
import re
import html
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.storage.memory import MemoryStorage

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SSL
try:
    import ssl
except ModuleNotFoundError:
    print("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å ssl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à Python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SSL.")
    sys.exit(1)

API_TOKEN = os.getenv("TG_BOT_TOKEN") or "7856435808:AAEAw0m684uJyrX3oX4lWO2n6jEHBs1xSy4"
GPT_API_KEY = os.getenv("OPENROUTER_API_KEY") or "sk-afe1b6ce8f5e4fc8b397fd1c2f47c983"

session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

platforms = ["VC.ru", "–î–∑–µ–Ω", "TenChat", "Telegram", "VK"]
multi_part_platforms = {"VC.ru": 3, "–î–∑–µ–Ω": 3}
user_articles = {}
user_modes = {}
edit_state = {}  # user_id: (index, platform)

@router.message(F.text == "/—Ä–µ–∂–∏–º")
async def choose_mode(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ê–¥–∞–ø—Ç–∏—Ä—É–π –º–æ–π —Ç–µ–∫—Å—Ç", callback_data="mode_adapt")],
        [InlineKeyboardButton(text="‚ûï –î–æ–ø–æ–ª–Ω–∏ –º–æ–π —Ç–µ–∫—Å—Ç", callback_data="mode_extend")],
        [InlineKeyboardButton(text="üÜï –ù–∞–ø–∏—à–∏ —Å –Ω—É–ª—è", callback_data="mode_new")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=markup)

@router.callback_query(F.data.startswith("mode_"))
async def set_mode(call: CallbackQuery):
    mode = call.data.split("_")[1]
    user_modes[call.from_user.id] = mode
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode}. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ...\n\n–¢–µ–∫—Å—Ç: ...")

async def generate_structured_adaptation(title, text, platform, mode, memory=None):
    headers = {
        "Authorization": f"Bearer {GPT_API_KEY}",
        "Content-Type": "application/json"
    }

    url = "https://api.deepseek.com/chat/completions"
    model = "deepseek-chat"
    result = ""
    memory = memory or ""

    if platform in multi_part_platforms:
        last_part = ""
        for i in range(1, multi_part_platforms[platform] + 1):
            prompt = f"–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ @prod_roz. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}. –†–µ–∂–∏–º: {mode}.\n"
            prompt += "–ü–∏—à–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≥–ª—É–±–æ–∫–æ, —Å —Å–∞–º–æ–∏—Ä–æ–Ω–∏–µ–π. –í —ç—Ç–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–µ–¥—ã–¥—É—â—É—é –º—ã—Å–ª—å.\n"
            if i > 1:
                prompt += f"–í –ø—Ä–µ–¥—ã–¥—É—â–µ–π —á–∞—Å—Ç–∏ —Ç—ã —É–∂–µ –ø–∏—Å–∞–ª: {last_part[:400]}...\n"
            prompt += f"–ß–ê–°–¢–¨ {i} –∏–∑ {multi_part_platforms[platform]}.\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

            body = {
                "model": model,
                "messages": [{"role": "system", "content": prompt}],
                "temperature": 0.8,
                "max_tokens": 2048
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=body) as resp:
                    if resp.status != 200:
                        return f"‚ùå –û—à–∏–±–∫–∞ {resp.status}: {await resp.text()}"
                    data = await resp.json()
                    part = data["choices"][0]["message"]["content"]
                    last_part = part.strip()
                    result += last_part + "\n\n"
    else:
        prompt = (
            f"–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ @prod_roz. –†–µ–∂–∏–º: {mode}. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}.\n"
            f"–°–æ–∑–¥–∞–π –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é, —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ª–æ–≥–∏—á–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º.\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"
        )
        body = {
            "model": model,
            "messages": [{"role": "system", "content": prompt}],
            "temperature": 0.8,
            "max_tokens": 2048
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=body) as resp:
                if resp.status != 200:
                    return f"‚ùå –û—à–∏–±–∫–∞ {resp.status}: {await resp.text()}"
                data = await resp.json()
                result = data["choices"][0]["message"]["content"]

    return result.strip()

@router.message(F.text.startswith("/start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Ç–∞—Ç—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ...\n\n–¢–µ–∫—Å—Ç: ...")

@router.message(F.text)
async def article_handler(message: types.Message):
    try:
        if message.from_user.id in edit_state:
            index, platform = edit_state.pop(message.from_user.id)
            user_articles[message.from_user.id]["adaptations"][index] = (platform, message.text)
            await message.answer("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä.")
            await send_adaptation(message.chat.id, message.from_user.id)
            return

        match = re.search(r"–ó–∞–≥–æ–ª–æ–≤–æ–∫:\s*(.*?)\n+–¢–µ–∫—Å—Ç:\s*(.+)", message.text, re.DOTALL)
        if not match:
            await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –ó–∞–≥–æ–ª–æ–≤–æ–∫: ...\n\n–¢–µ–∫—Å—Ç: ...")
            return

        title, content = match.groups()
        await message.answer("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º...")

        user_articles[message.from_user.id] = {
            "adaptations": [],
            "approved": [],
            "current": 0
        }
        mode = user_modes.get(message.from_user.id, "adapt")

        for platform in platforms:
            adapted = await generate_structured_adaptation(title, content, platform, mode)
            user_articles[message.from_user.id]["adaptations"].append((platform, adapted))

        await send_adaptation(message.chat.id, message.from_user.id)

    except Exception as e:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—à–∏–±–∫–∞: " + str(e))

async def send_adaptation(chat_id, user_id):
    data = user_articles.get(user_id)
    if not data or data["current"] >= len(data["adaptations"]):
        approved = data.get("approved", [])
        if approved:
            buttons = [[InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="publish_all")],
                       [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å", callback_data="restart")]]
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤: {', '.join(approved)}", reply_markup=markup)
        else:
            await bot.send_message(chat_id, "‚è≠ –í—Å–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
        return

    index = data["current"]
    platform, text = data["adaptations"][index]
    safe_text = html.escape(text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="add_publish")],
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")],
        [InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")]
    ])

    chunk_size = 3500
    chunks = [safe_text[i:i + chunk_size] for i in range(0, len(safe_text), chunk_size)]
    for idx, chunk in enumerate(chunks):
        if idx == len(chunks) - 1:
            await bot.send_message(chat_id, f"üîπ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è {platform}:\n\n{chunk}", parse_mode="HTML", reply_markup=keyboard)
        else:
            await bot.send_message(chat_id, chunk, parse_mode="HTML")

@router.callback_query(F.data == "add_publish")
async def add_platform(call: CallbackQuery):
    user_id = call.from_user.id
    user_articles[user_id]["approved"].append(user_articles[user_id]["adaptations"][user_articles[user_id]["current"]][0])
    user_articles[user_id]["current"] += 1
    await call.message.edit_reply_markup(reply_markup=None)
    await send_adaptation(call.message.chat.id, user_id)

@router.callback_query(F.data == "skip")
async def skip_platform(call: CallbackQuery):
    user_articles[call.from_user.id]["current"] += 1
    await call.message.edit_reply_markup(reply_markup=None)
    await send_adaptation(call.message.chat.id, call.from_user.id)

@router.callback_query(F.data == "edit")
async def edit_adaptation(call: CallbackQuery):
    user_id = call.from_user.id
    index = user_articles[user_id]["current"]
    platform = user_articles[user_id]["adaptations"][index][0]
    edit_state[user_id] = (index, platform)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("üìù –ü—Ä–∏—à–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")

@router.callback_query(F.data == "publish_all")
async def publish_selected(call: CallbackQuery):
    approved = user_articles[call.from_user.id].get("approved", [])
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ. –í—ã –≤—ã–±—Ä–∞–ª–∏: " + ", ".join(approved))

@router.callback_query(F.data == "restart")
async def restart_adaptations(call: CallbackQuery):
    user_articles[call.from_user.id]["current"] = 0
    user_articles[call.from_user.id]["approved"] = []
    await call.message.edit_reply_markup(reply_markup=None)
    await send_adaptation(call.message.chat.id, call.from_user.id)

async def main():
    import logging
    import nest_asyncio
    nest_asyncio.apply()
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(main())
